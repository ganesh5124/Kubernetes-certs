apiVersion: v1
kind: Pod
metadata:
  name: mc-pod
  namespace: mc-namespace
  labels:
    app: mc-pod
spec:
  restartPolicy: Always            # Always, OnFailure, Never
  containers:
  - name: mc-pod-1
    image: nginx:1-alpine
    env:
      - name: NODE_NAME
        value: controlplane
  - name: mc-pod-2
    image: busybox:1
    command:
    - /bin/sh
    - -c
    - while true; do date > /var/log/shared/date.log; sleep 1; done;
    volumeMounts:
    - name: shared-volume
      mountPath: /var/log/shared
  - name: mc-pod-3
    image: busybox:1
    command:
    - /bin/sh
    - -c
    - tail -f /var/log/shared/date.log
    volumeMounts:
    - name: shared-volume
      mountPath: /var/log/shared
  volumes:
  - name: shared-volume
    emptyDir: {}


---
apiVersion: v1
kind: Service
metadata:
  name: messaging-service
spec:
  selector:
    tier: msg
  type: ClusterIP                      # ClusterIP, NodePort, LoadBalancer, ExternalName
  #  sessionAffinity: ClientIP
  ports:
  - port: 6379
    targetPort: 6379

---
apiVersion: v1
kind: Service
metadata:
  name: hr-web-app-service
spec:
  selector:
    app: hr-web-app
  type: NodePort                      # ClusterIP, NodePort, LoadBalancer, ExternalName
  #  sessionAffinity: ClientIP
  ports:
  - port: 8080
    targetPort: 8080
    nodePort: 30082
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: pv-analytics
spec:
  capacity:
    storage: 100Mi
  accessModes:
    - ReadWriteMany
  hostPath:
    path: /pv/data-analytics

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: webapp-hpa
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: kkapp-deploy 
  minReplicas: 1
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 50
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300

---
apiVersion: autoscaling.k8s.io/v1
kind: VerticalPodAutoscaler
metadata:
  name: analytics-vpa
spec:
  targetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: analytics-deployment
  updatePolicy:
    updateMode: Auto

---
apiVersion: gateway.networking.k8s.io/v1
kind: Gateway
metadata:
  name: web-gateway
  namespace: nginx-gateway
spec:
  gatewayClassName: nginx
  listeners:
  - name: http
    protocol: HTTP
    port: 80
    allowedRoutes:
      namespaces:
        from: All

`
# aws ec2 create-key-pair   --key-name devops-kp   --key-type rsa   --query 'KeyMaterial'   --output text > devops-kp.pem
#     2  chmod 400 devops-kp.pem
#     3  aws ec2 describe-vpcs --filters Name=isDefault,Values=true --query "Vpcs[0].VpcId" --output text
#     4  aws ec2 describe-subnets --filters Name=default-for-az,Values=true --query "Subnets[0].SubnetId" --output text
#     5  aws ec2 run-instances   --image-id ami-0cd59ecaf368e5ccf   --instance-type t2.micro   --key-name devops-kp   --security-groups default   --subnet-id subnet-0743caee19251ad61    --tag-specifications 'ResourceType=instance,Tags=[{Key=Name,Value=devops-ec2}]'
#     6  aws ec2 run-instances   --image-id ami-0cd59ecaf368e5ccf   --instance-type t2.micro   --key-name devops-kp   --security-groups default   --subnet-id "subnet-0743caee19251ad61"    --tag-specifications 'ResourceType=instance,Tags=[{Key=Name,Value=devops-ec2}]'
#     7  subnet-0743caee19251ad61
#     8  SUBNET_ID=$(aws ec2 describe-subnets --filters Name=default-for-az,Values=true --query "Subnets[0].SubnetId" --output text)
#     9  echo $SUBNET_ID=$
#    10  echo $SUBNET_ID
#    11  aws ec2 run-instances   --image-id ami-0cd59ecaf368e5ccf   --instance-type t2.micro   --key-name devops-kp   --security-groups default   --subnet-id "$SUBNET_ID"   --tag-specifications 'ResourceType=instance,Tags=[{Key=Name,Value=devops-ec2}]'
#    12  aws ec2 run-instances   --image-id ami-0cd59ecaf368e5ccf   --instance-type t2.micro   --key-name devops-kp   --security-groups default   --subnet-id "$SUBNET_ID"   --tag-specifications 'ResourceType=instance,Tags=[{Key=Name,Value=devops-ec2}]'
#    13  SECURITY_GROUP_ID=$(aws ec2 describe-security-groups \
#   --filters Name=group-name,Values=default \
#   --query "SecurityGroups[0].GroupId" \
#   --output text)
#    14  echo $SECURITY_GROUP_ID
#    15  aws ec2 run-instances   --image-id ami-0cd59ecaf368e5ccf   --instance-type t2.micro   --key-name devops-kp   --security-group-ids "$SECURITY_GROUP_ID"   --subnet-id "$SUBNET_ID"   --tag-specifications 'ResourceType=instance,Tags=[{Key=Name,Value=devops-ec2}]'
#    16  history`

---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    deployment.kubernetes.io/revision: "1"
    kubectl.kubernetes.io/last-applied-configuration: |
      {"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{},"labels":{"app":"lamp"},"name":"lamp-wp","namespace":"default"},"spec":{"selector":{"matchLabels":{"app":"lamp","tier":"frontend"}},"strategy":{"type":"Recreate"},"template":{"metadata":{"labels":{"app":"lamp","tier":"frontend"}},"spec":{"containers":[{"env":[{"name":"MYSQL_ROOT_PASSWORD","valueFrom":{"secretKeyRef":{"key":"password","name":"mysql-root-pass"}}},{"name":"MYSQL_DATABASE","valueFrom":{"secretKeyRef":{"key":"database","name":"mysql-db-url"}}},{"name":"MYSQL_USER","valueFrom":{"secretKeyRef":{"key":"username","name":"mysql-user-pass"}}},{"name":"MYSQL_PASSWORD","valueFrom":{"secretKeyRef":{"key":"password","name":"mysql-user-pass"}}},{"name":"MYSQL_HOST","valueFrom":{"secretKeyRef":{"key":"host","name":"mysql-host"}}}],"image":"webdevops/php-apache:alpine-3-php7","name":"httpd-php-container","ports":[{"containerPort":80,"name":"httpd"}],"volumeMounts":[{"mountPath":"/opt/docker/etc/php/php.ini","name":"php-config-volume","subPath":"php.ini"}]},{"env":[{"name":"MYSQL_ROOT_PASSWORD","valueFrom":{"secretKeyRef":{"key":"password","name":"mysql-root-pass"}}},{"name":"MYSQL_DATABASE","valueFrom":{"secretKeyRef":{"key":"database","name":"mysql-db-url"}}},{"name":"MYSQL_USER","valueFrom":{"secretKeyRef":{"key":"username","name":"mysql-user-pass"}}},{"name":"MYSQL_PASSWORD","valueFrom":{"secretKeyRef":{"key":"password","name":"mysql-user-pass"}}},{"name":"MYSQL_HOST","valueFrom":{"secretKeyRef":{"key":"host","name":"mysql-host"}}}],"image":"mysql:5.6","name":"mysql-container","ports":[{"containerPort":3306,"name":"mysql"}]}],"volumes":[{"configMap":{"name":"php-config"},"name":"php-config-volume"}]}}}}
  creationTimestamp: "2025-07-21T11:38:53Z"
  generation: 1
  labels:
    app: lamp
  name: lamp-wp
  namespace: default
  resourceVersion: "3189"
  uid: b1928ff9-bb88-43b2-af31-ed7ca02ff839
spec:
  progressDeadlineSeconds: 600
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: lamp
      tier: frontend
  strategy:
    type: Recreate
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: lamp
        tier: frontend
    spec:
      containers:
      - env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              key: password
              name: mysql-root-pass
        - name: MYSQL_DATABASE
          valueFrom:
            secretKeyRef:
              key: database
              name: mysql-db-url
        - name: MYSQL_USER
          valueFrom:
            secretKeyRef:
              key: username
              name: mysql-user-pass
        - name: MYSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              key: password
              name: mysql-user-pass
        - name: MYSQL_HOST
          valueFrom:
            secretKeyRef:
              key: host
              name: mysql-host
        image: webdevops/php-apache:alpine-3-php7
        imagePullPolicy: IfNotPresent
        name: httpd-php-container
        ports:
        - containerPort: 80
          name: httpd
          protocol: TCP
        resources: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /opt/docker/etc/php/php.ini
          name: php-config-volume
          subPath: php.ini
      - env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              key: password
              name: mysql-root-pass
        - name: MYSQL_DATABASE
          valueFrom:
            secretKeyRef:
              key: database
              name: mysql-db-url
        - name: MYSQL_USER
          valueFrom:
            secretKeyRef:
              key: username
              name: mysql-user-pass
        - name: MYSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              key: password
              name: mysql-user-pass
        - name: MYSQL_HOST
          valueFrom:
            secretKeyRef:
              key: host
              name: mysql-host
        image: mysql:5.6
        imagePullPolicy: IfNotPresent
        name: mysql-container
        ports:
        - containerPort: 3306
          name: mysql
          protocol: TCP
        resources: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
      volumes:
      - configMap:
          defaultMode: 420
          name: php-config
        name: php-config-volume
status:
  availableReplicas: 1
  conditions:
  - lastTransitionTime: "2025-07-21T11:39:15Z"
    lastUpdateTime: "2025-07-21T11:39:15Z"
    message: Deployment has minimum availability.
    reason: MinimumReplicasAvailable
    status: "True"
    type: Available
  - lastTransitionTime: "2025-07-21T11:38:53Z"
    lastUpdateTime: "2025-07-21T11:39:15Z"
    message: ReplicaSet "lamp-wp-56c7c454fc" has successfully progressed.
    reason: NewReplicaSetAvailable
    status: "True"
    type: Progressing
  observedGeneration: 1
  readyReplicas: 1
  replicas: 1
  updatedReplicas: 1

