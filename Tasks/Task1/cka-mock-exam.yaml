apiVersion: v1
kind: Pod
metadata:
  name: mc-pod
  namespace: mc-namespace
  labels:
    app: mc-pod
spec:
  restartPolicy: Always            # Always, OnFailure, Never
  containers:
  - name: mc-pod-1
    image: nginx:1-alpine
    env:
      - name: NODE_NAME
        value: controlplane
  - name: mc-pod-2
    image: busybox:1
    command:
    - /bin/sh
    - -c
    - while true; do date > /var/log/shared/date.log; sleep 1; done;
    volumeMounts:
    - name: shared-volume
      mountPath: /var/log/shared
  - name: mc-pod-3
    image: busybox:1
    command:
    - /bin/sh
    - -c
    - tail -f /var/log/shared/date.log
    volumeMounts:
    - name: shared-volume
      mountPath: /var/log/shared
  volumes:
  - name: shared-volume
    emptyDir: {}


---
apiVersion: v1
kind: Service
metadata:
  name: messaging-service
spec:
  selector:
    tier: msg
  type: ClusterIP                      # ClusterIP, NodePort, LoadBalancer, ExternalName
  #  sessionAffinity: ClientIP
  ports:
  - port: 6379
    targetPort: 6379

---
apiVersion: v1
kind: Service
metadata:
  name: hr-web-app-service
spec:
  selector:
    app: hr-web-app
  type: NodePort                      # ClusterIP, NodePort, LoadBalancer, ExternalName
  #  sessionAffinity: ClientIP
  ports:
  - port: 8080
    targetPort: 8080
    nodePort: 30082
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: pv-analytics
spec:
  capacity:
    storage: 100Mi
  accessModes:
    - ReadWriteMany
  hostPath:
    path: /pv/data-analytics

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: webapp-hpa
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: kkapp-deploy 
  minReplicas: 1
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 50
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300

---
apiVersion: autoscaling.k8s.io/v1
kind: VerticalPodAutoscaler
metadata:
  name: analytics-vpa
spec:
  targetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: analytics-deployment
  updatePolicy:
    updateMode: Auto

---
apiVersion: gateway.networking.k8s.io/v1
kind: Gateway
metadata:
  name: web-gateway
  namespace: nginx-gateway
spec:
  gatewayClassName: nginx
  listeners:
  - name: http
    protocol: HTTP
    port: 80
    allowedRoutes:
      namespaces:
        from: All

`
# aws ec2 create-key-pair   --key-name devops-kp   --key-type rsa   --query 'KeyMaterial'   --output text > devops-kp.pem
#     2  chmod 400 devops-kp.pem
#     3  aws ec2 describe-vpcs --filters Name=isDefault,Values=true --query "Vpcs[0].VpcId" --output text
#     4  aws ec2 describe-subnets --filters Name=default-for-az,Values=true --query "Subnets[0].SubnetId" --output text
#     5  aws ec2 run-instances   --image-id ami-0cd59ecaf368e5ccf   --instance-type t2.micro   --key-name devops-kp   --security-groups default   --subnet-id subnet-0743caee19251ad61    --tag-specifications 'ResourceType=instance,Tags=[{Key=Name,Value=devops-ec2}]'
#     6  aws ec2 run-instances   --image-id ami-0cd59ecaf368e5ccf   --instance-type t2.micro   --key-name devops-kp   --security-groups default   --subnet-id "subnet-0743caee19251ad61"    --tag-specifications 'ResourceType=instance,Tags=[{Key=Name,Value=devops-ec2}]'
#     7  subnet-0743caee19251ad61
#     8  SUBNET_ID=$(aws ec2 describe-subnets --filters Name=default-for-az,Values=true --query "Subnets[0].SubnetId" --output text)
#     9  echo $SUBNET_ID=$
#    10  echo $SUBNET_ID
#    11  aws ec2 run-instances   --image-id ami-0cd59ecaf368e5ccf   --instance-type t2.micro   --key-name devops-kp   --security-groups default   --subnet-id "$SUBNET_ID"   --tag-specifications 'ResourceType=instance,Tags=[{Key=Name,Value=devops-ec2}]'
#    12  aws ec2 run-instances   --image-id ami-0cd59ecaf368e5ccf   --instance-type t2.micro   --key-name devops-kp   --security-groups default   --subnet-id "$SUBNET_ID"   --tag-specifications 'ResourceType=instance,Tags=[{Key=Name,Value=devops-ec2}]'
#    13  SECURITY_GROUP_ID=$(aws ec2 describe-security-groups \
#   --filters Name=group-name,Values=default \
#   --query "SecurityGroups[0].GroupId" \
#   --output text)
#    14  echo $SECURITY_GROUP_ID
#    15  aws ec2 run-instances   --image-id ami-0cd59ecaf368e5ccf   --instance-type t2.micro   --key-name devops-kp   --security-group-ids "$SECURITY_GROUP_ID"   --subnet-id "$SUBNET_ID"   --tag-specifications 'ResourceType=instance,Tags=[{Key=Name,Value=devops-ec2}]'
#    16  history`


vpc-03c817822cf4d3d83
subnet-01cfbfdb85be32901